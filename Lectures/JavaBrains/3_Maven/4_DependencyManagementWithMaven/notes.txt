12)declarative dependency management explained
    Without maven , you need to download jar(contents of jar- classes and libraries) and copy it to 
    your class path in order to use it.if you use maven you just need to mention all dependencies in
    pom.xml and maven will make them avalaible in your class path.

    these dependencies are artifacts of other maven projects which are identified by their coordinates
    in maven universe. see figure 1.

13)Examining the POM dependencies section
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.junit</groupId>
                <artifactId>junit-bom</artifactId>
                <version>5.11.0</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>


    groupId, artifactid and version is common, we will talk about scope later.


14)Adding a new dependency
    search for dependency on website - https://mvnrepository.com/ (their are other ones also, like maven central)
    after finding library,select the remote repository to which your local maven points. by default all new maven projects point to central repository.
    select repository, then select version. then copy maven coordinates in pom.xml.
    now we issue a maven command so that new dependency is downloaded, so we ran mvn compile


16)Maven strategies for transitive dependencies
    see figure 2 for problem.
    we cannot different versin sof same class
    when you bring a library and it to class path it is like flat list.every library in class path acts as if it their on its own.
    their is no nesting, you cannot have version 3 of library B which library A uses and then version 2 of library B which your project
    uses. their is no such thing.all versions resides at same level when brought to class path.

    so it uses concept called Dependency Mediation.so it needs to decide which version to pick. it decides that, by different strategies -

    a)nearest one - it ick version which has least depth, depth from your project.
    b)first declaration -it picks up the first one declared.

    this is default option, what if you want to down load a particular version, then ou need to include that dependency manually in pom.xml and
    only that version will be downloaded.

    also their is a excldue option which allows you to exclude a transitive dependency dependency.


        <dependency>
            <groupId>com.example</groupId>
            <artifactId>library-A</artifactId>
            <version>1.0</version>
            <exclusions>
                <exclusion>
                <groupId>com.oldlogging</groupId>
                <artifactId>old-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

17)dependency scopes
    dependency scope means at which particular time in build process you need that dependency.
    default scope is compile.

    scopes -
        a)compile - default
        b)test - only need at test scope.
        c)provided - it means you do not need it to part of build. it will be provide by run time env.
            so this will be part of compilation, but it wnt be part of final distribution.
            ex - java EE or Java servelet container contains all api's.so you dnt need to bundle server/javaEE api's when deploying
            app on servelet/java EE container. .server that holds your app will have all the api's.so we need these for development process
            not for distribution process.we say i need this api while coding but not provide me these when distributing.this will be provided
            to me by container.i just need them now so that I can write teh code and have them compiled.when I am running it, it will be provided
            for me.
        d)runtime - Opppsite of provided.  these are not needed at development but neeed at run time.ex - db connection driver.
        i do not need at compile time, but only need it at run time

        this comes under dependencies.

        related question - https://www.udemy.com/course/maven-essentials/learn/lecture/47979857#questions/23314805/


18)Declaring and Using properties

    Declaring -
        <properties>
            <junit.version>color</junit.version>
        </properties>

    Using it -
        ${junit.version}

    where to use it -
        when different dependencies need to have same version, so we can have version at single place. see version value of pom.xml.