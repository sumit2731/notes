1)get Access to context -
    1)Implement ApplicationContextAware, spring calls setApplicationContext with application context.
    2)use autowiring -
        constructor Injection
        Field Injection


1)getting bean -
    1)via context
        context.getBeanNamesForType(Person.class)
        context.getBeanNamesForType(beanName, Person.class)
        It takes 2 more params -
            supplier (optional)	Supplier<T>	Custom logic to create the bean instance
            customizers (optional)	BeanDefinitionCustomizer...	To customize things like scope, lazy, primary, etc.
            what things can be customeized -

            setScope("prototype" or "singleton")
            setLazyInit(true/false)
            setPrimary(true/false)
            setAutowireCandidate(false)
            Add qualifiers
            Add descriptions or roles


            context.registerBean(
                MyService.class,
                () -> new MyServiceImpl("custom"),
                bd -> {
                    bd.setScope(ConfigurableBeanFactory.SCOPE_PROTOTYPE);
                    bd.setLazyInit(true);
                }
            );

    2)ObjectProvider - see section 4





Spring -
    a)Interceptors -
        Interceptor should implement this interface - HandlerInterceptor
        Registering class should implement this - WebMvcConfigurer

        see code in important topics, folder 1
    

    a)Resolving template, we need to define beans of this type  -
        SpringResourceTemplateResolver - 
            Locate templates in the classpath or file system
            Apply prefix and suffix (e.g., classpath:/templates/, .html)
            Specify the template mode (HTML, XML, TEXT)
            Decide if templates should be cached (for performance)
        SpringTemplateEngine - This is the core Thymeleaf engine that:
            Parses and processes templates
            Applies Spring expressions (SpEL), e.g., ${user.name}, @myService.getName()
            Binds model data into the template
            Uses the SpringResourceTemplateResolver to fetch templates
            
        ViewResolver(ThymeleafViewResolver) - This is a Spring MVC component that maps the logical view name (returned by a controller) 
            to an actual rendered template using the SpringTemplateEngine.

            Accepts logical view name like "home"
            Uses SpringTemplateEngine to process home.html
            Returns rendered HTML to Spring MVC dispatcher
            Refer slide 78 and lecture 81.

        How they work togather -
            Spring MVC Controller → "home"
                ↓
            ViewResolver (ThymeleafViewResolver)
                ↓
            SpringTemplateEngine
                ↓
            SpringResourceTemplateResolver
                ↓
            Loads: classpath:/templates/home.html
                ↓
            Processes template with model data and SpEL
                ↓
            Returns rendered HTML

    a)RequestEntity<Contact> requestEntity -  org.springframework.http.*;
        Syntax -
            @RestController 
            class c1 {
                @DeleteMapping("/deleteMsg")
                public ResponseEntity<Response> deleteMsg(RequestEntity<Contact> requestEntity){}
            }

        API - 
            requestEntity.getHeaders()
            requestEntity.getBody()
        Use - 
            This represent the whole HTTP request. This is passed as first argument to controller method.
    b)ResponseEntity<Response> - org.springframework.http.*
        Syntax -
            Refer Above
        API - 
            ResponseEntity
                .status(HttpStatus.OK)
                .header('headerName', 'headerValue')
                .body(response);
            Constructor can be called with either body,status or header.
        Use - Return param of controller method can be this, allowing us to set, headers, sttaus.
            If we return a JavaPojo then that is automatically added to resonseBody.

    c)ResponseEntityExceptionHandler - Example 45 code. GlobalExceptionRestController

    d)HttpEntity - org.springframework.http.HttpEntity
        Project 46, used in Resdttemplate to snd a request with headers and body

    e)jackson - In spring jackson is default library used for -
            Serializing Java objects → JSON (sending response)
            Deserializing JSON → Java objects (parsing request)

            It works through ObjectMapper internally.ObjectMapper is class in jackson package.spring creates the bean of ObjectMapper.
            Spring Uses MappingJackson2HttpMessageConverter which Which internally uses the ObjectMapper to serialize User into JSON.

            Flow -
                Client --> [JSON] --> Spring --> HttpMessageConverter --> ObjectMapper --> Java Object

            Steps -

                Spring sees Content-Type: application/json
                It looks for a converter that supports it → finds MappingJackson2HttpMessageConverter
                This converter uses the auto-configured ObjectMapper
                JSON body is parsed into a User object using Jackson

            Jackson provides a set of powerful annotations — and Spring fully supports them out of the box. common annotations -
                Property level -
                    @JsonProperty
                    @JsonIgnore,@JsonIgnoreProperties
                    @JsonInclude(JsonInclude.Include.NON_NULL) - Controls inclusion of fields based on value:, skips non nul.
                    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd") - Formats values like dates, numbers, enums.
                Constructor / Factory Control - 
                    @JsonCreator - Tells Jackson which constructor or factory method to use for deserialization.
                    @JsonProperty - Used with @JsonCreator to map JSON keys to constructor parameters.

                        public class User {
                            private final String name;

                            @JsonCreator
                            public User(@JsonProperty("name") String name) {
                                this.name = name;
                            }
                        }
                    @JsonSetter/@JsonGetter - Specifies a custom setter method for deserialization.
                Custom (De)Serializers -
                    a)@JsonSerialize
                        @JsonSerialize(using = CustomDateSerializer.class)
                        private LocalDate date;

    f)

Spring Security -
    Spring’s UserDetailsService returns a UserDetails object that represents the logged-in user.
    Spring provides a default class: org.springframework.security.core.userdetails.User.

    Default Interface which returns this object - org.springframework.security.core.userdetails.UserDetailsService
    Implementation of this interface is provided by Spring -   org.springframework.security.provisioning.InMemoryUserDetailsManager

General java -
    a)Optional<Contact> contact - java.util.Optional
        contact.isPresent()
        contact.get()
        contact.orElseThrow(() -> new RuntimeException("Contact not found"));
        contact.orElse(null);
        contact.ifPresent(c -> System.out.println(c.getName()));
        contact.ifPresentOrElse(
            c -> System.out.println(c.getName()),
            () -> System.out.println("Contact not found")
        );
        contact.map(Contact::getName).orElse("Unknown");
        contact.filter(c -> c.getName().startsWith("A")).orElse(null);
        contact.flatMap(c -> Optional.ofNullable(c.getName())).orElse("Unknown");
        contact.orElseGet(() -> new Contact("Default Name", "Default Email"));
        contact.orElseThrow(() -> new ContactNotFoundException("Contact not found"));

    b)AnnotationProcessingTool - see section 8