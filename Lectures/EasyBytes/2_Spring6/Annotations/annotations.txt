Form Course -
    1)Defining Beans -
        1)@Bean - @Bean annotation lets Spring know that it needs to call this method when it initializes its context and adds the 
            returned object/value to the Spring context/Spring loC Container.Also returned value is converted into bean.
        3)@Primary - slide 22
        4)@Component - slide 23
        5)@Controller, @Service,@Repository - slide 24
        6)@PostConstruct - slide 27
        7)@PreDestroy -slide 28
        11)@Lazy - slide 53
    2)Configurations -
        1)@Configuration - code 1
            a)Can Have @Bean Method, so this class is passed as argument to Spring Bean to register beans.
            b)Why we use it when we use @ComponentScan -
                a)Manual bean creation: You want fine-grained control over object creation.
                b)External library integration: Third-party classes don’t have @Component, and you can’t add annotations to them.
                c)Conditional Bean Creation Complex bean creation logic that depends on conditions.
                    @Bean
                    @ConditionalOnProperty(name = "app.feature.enabled", havingValue = "true")
                    public FeatureService featureService() {
                        return new FeatureService();
                    }

                    @Bean
                    @Profile("production")
                        public CacheManager cacheManager() {
                        return new RedisCacheManager();
                    }
                d)Configuration Classes can be imported into other configuration classes using @Import.
        2)@ComponentScan
            @ComponentScan(basePackages = {"com.example.implementation","com.example.services"})
            @ComponentScan(basePackageClasses = {com.example.beans.Vehicle.class,com.example.beans.Person.class})
    3)Bean Injection -
        1)@Autowired
        2)@Qualifier - slide 46, specifies the name of bean which should be injected, if more than 1 bean exists for
            given type
        3)@Value - slide 47
    4)Bean Scope
        1)@Scope(BeanDefinition.SCOPE_PROTOTYPE) - slide 50,90
            @PrototypeScope
            @RequestScope
            @SessionScope
            @ApplicationScope
        2)@Lookup (not covered in course) - when you inject Prototype scoped bean into Singleton scoped bean, you can use @Lookup annotation
         to get new instance of prototype bean every time you refer to it inside singleton bean.
            
            @Lookup // This method will be overridden by Spring to return a new Task instance
            public abstract Task createTask(); // The return type is the prototype bean

    5)AOP -
        1)@EnableAspectJAutoProxy - Slide 63
        2)@Aspect - Defines a aspect
        3)@Before, @AfterReturning, @AfterThrowing, @After, @Around - - Defines the advise (when aspect will be executed).
            It takes pointcut expression as argument
        4)@Order
        5)@PointCut (not covered in course)
        6)Defining annotations - 
            @Retention
            @Target


    6)MVC -
        1)@SpringBootApplication(exclude = ...) -
            1)@SpringBootConfiguration - @Configuration, @Indexed
            2)@EnableAutoConfiguration(exclude = ...) - Enables auto-configuration of Spring application context.
            3)@ComponentScan - Scans for components, configurations, and services in the specified package and its sub-packages.
        2)@Controller - Defines controller in MVC, this will have method which will executed for incoming requests.
        3)@RequestMapping(value={"", "/", "home"}, method = POST) - method inside Controller.
            @PostMapping(value ="/abc") - shortcut for @RequestMapping(method = POST)
            @GetMapping(value ="/abc")
            @DeleteMapping(value ="/abc")

            param -
                name - The name parameter in @RequestMapping is used to assign a logical identifier to the mapping, which 
                    can be referenced later for URL generation and reverse routing.
                    
                    Default is empty string.
                    If not specified, Spring automatically generates a name based on the handler method.

                    useage -
                        @Autowired private MvcUriComponentsBuilder mvcUriComponentsBuilder;
                        String url = MvcUriComponentsBuilder
                            .fromMappingName("getUserById")
                            .arg(123L)
                            .build();

                value/path - Defines the URL patterns this mapping handles. These are aliases of each other.
                    @RequestMapping(value = "/users")
                method - Specifies which HTTP methods this mapping accepts (GET, POST, PUT, DELETE, etc.).
                params - The params constraint is evaluated against query parameters (for GET requests) or form parameters 
                    (for POST requests). The mapping will only match if ALL specified parameter conditions are met.
                    @RequestMapping(value = "/search", params = "query") - Matches: /search?query=spring
                    @RequestMapping(value = "/data", params = "!debug") - Does NOT match: /data?debug=true
                headers - HTTP headers that must be present/absent for mapping to match.
                    @RequestMapping(value = "/api", headers = "!X-Custom-Header")
                consumes - The consumes parameter in @RequestMapping specifies which media types (Content-Type headers) the endpoint
                    can accept in the request body. It acts as a filter that restricts which requests can be handled based on their 
                    Content-Type header.
                    
                    JSON - application/json
                    XML - application/xml
                    Form Data - application/x-www-form-urlencoded
                    File uploads - multipart/form-data
                    
                produces - The produces parameter in @RequestMapping specifies which media types (Content-Type 
                    values) the endpoint can generate in the HTTP response.It works with content negotiation 
                    to determine the response format based on the client's Accept header.Spring matches the 
                    client's Accept header against the produces values. The mapping only matches if the client 
                    accepts at least one of the specified response media types.

                    whole process -
                        Client Side:
                            Client sends Content-Type header indicating request body format
                            Client sends Accept header indicating preferred response formats
                        Server Side:
                            Server checks produces parameter against client's Accept header
                            Server checks consumes parameter against client's Content-Type header
                            Server selects best matching format or returns error
                
        4)@RequestParam - used to accept queryParam or formData.used in method of Controller.
            @RequestMapping(value = "/saveMsg",method = POST) - slide 83
            public ModelAndView saveMessage(@RequestParam String name)

            Parameters -
                value/name - Specifies the name of the request parameter to bind to the method parameter.
                required(default: true)
                defaultValue
            Note - value parameter can be skipped.
        5)@PathVariable - slide 84
            Used to accept variable URL
            
            @RequestMapping(value = "/holidays/{display}",method = GET`) - slide 83
            public ModelAndView saveMessage(@PathVariable String display)

           

            param - 
                name,value - same as @RequestParam
                required - same as @RequestParam

        6)@ModelAttribute  - This is used on parameter of method of controller class. It adds a the parameter
            to model of view.

            @RequestMapping(value = "/saveMsg",method = POST)
            public String saveMessage(@Valid @ModelAttribute("contact") Contact contact, Errors errors, Model model) {}
        7)@Valid - It is imported from jakarta package.When user submits the form it compares the form data
            with POJO class annonated with jakarta validation annotations and if it is not valid, passses
            the errors to error object and adds that to model as well.

            code - Example 24, ContactController.java


    7)Error handling-
        1)@ControllerAdvice/@RestControllerAdvice(section 13, slide 102) -
            Uses -
                a)handle exceptions across all contollers by defining using @ExceptionHandler.
                b)Global Model Attributes - add attributes to all models
                    @ModelAttribute("currentYear")
                    public int getCurrentYear() {
                        return LocalDate.now().getYear();
                    }
                c)Using @InitBinder - This is used to customize the data binding(form request to params of controller) process 
                    for all controllers.It can be used to register custom editors, formatters, or validators that apply globally.
                    For example, you can create a global data binder that automatically trims whitespace from all String inputs
                    and configures a global date format for Date objects.

                    Can be used inside Controller , their it affects mapping of all methods defined inside that controller.
                    see figure1.

                    Syntax -

                        @ControllerAdvice
                        public class GlobalDataBinder {

                            @InitBinder
                            public void initBinder(WebDataBinder binder) {
                                // Automatically trim whitespace from all String inputs
                                binder.registerCustomEditor(String.class, new StringTrimmerEditor(true));
                            }
                            @InitBinder
                            public void initBinder(WebDataBinder binder) {
                                // Configure global date format
                                SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                                dateFormat.setLenient(false); // Strict date parsing
                                
                                binder.registerCustomEditor(Date.class, new CustomDateEditor(dateFormat, true));
                            }
                        }

                    param - If you don’t provide a name (i.e., just use @InitBinder without any argument), the method applies to all binding 
                        operations in that controller.
                    
                        It takes a parameter, then mapping will only be applied if specififc form/model object is being
                            used in controller methods. This allows you to customize the data binding process for specific types 
                            of bound by providing its name.

                                @InitBinder("user")
                                public void initUserBinder(WebDataBinder binder) {
                                    binder.setDisallowedFields("password");
                                }

                                will be applied when -
                                    @PostMapping("/register")
                                    public String registerUser(@ModelAttribute("user") User user) {
                                        // binding happens here
                                        return "success";
                                    }

                    Note this does not work for JSON object because JSON binding uses Jackson (or Gson) via HttpMessageConverters
                        ,not WebBinders.to see how to modify JSON binding see rEST section.

            Params -
                It can be passed para,es to alter the scope of Controller s it affects.
                ByClass
                ByPackage
                ByAnnotation
                You mention a class, it will affect all classes in package

        2)@ExceptionHandler - This is used to handle specific exceptions thrown by controller methods.
            It can be used to handle exceptions -
                a)Globally in all controller by using it inside @ControllerAdvice.
                b)IN a particular Controller by using it inside @Controller
            params -
                a)It accepts the ErrorClass that it should handle. If passed base error class, it handles all types of errors.
            Return -
                a)ModelAndView
                b)string representing view
                c)ResponseEntity - api response or JSON



    8)RestServices -
        1)@RestController(slide 171) - Same as @Controller.but with this extra thing - we are telling to our DispatcherServlet 
            saying that please do not send any view details as part of my response because the other application which
            is trying to consume my REST service, they just need a data,they don't need a view. but now methods inside
            controller do not need to use @ResponseBody.

            1)@ResponseBody(slide 168) - If you do not use @RestController, then on each method you need to use this.
                to our DispatcherServlet saying that please do not send any view details as part of my response because
                the other application which is trying to consume my REST service, they just need a data, they don't
                need a view.
            3)@RequestBody - Places the request body in method param.
            4)@RequestHeader("invocationFrom") - accepts value from header.

        2)@ResponseStatus - Used to set the HTTP status code for the response.
            @ResponseStatus(HttpStatus.CREATED)
            public void createUser(@RequestBody User user) {
                // User creation logic
            }
                
        3)@RestControllerAdvice -combination of @ControllerAdvice and @ResponseBody. So it will intercept the errors
            thrown by controllers but always returns json in response body.

        4)@CORS - prevents the CORS error on client.

        3)To customize the data received from clinet before it eaches handlers -
            a)Jackson annotations
                public class User {
                    @JsonFormat(pattern = "yyyy-MM-dd")
                    private LocalDate dob;
                }

            b)Custom deserializers 
                public class CustomDateDeserializer extends JsonDeserializer<LocalDate> {
                    @Override
                    public LocalDate deserialize(JsonParser p, DeserializationContext ctxt)
                        throws IOException {
                        return LocalDate.parse(p.getText(), DateTimeFormatter.ofPattern("yyyy-MM-dd"));
                    }
                }

                Then register using:
                
                    public class User {
                        @JsonDeserialize(using = CustomDateDeserializer.class)
                        private LocalDate dob;
                    }

            c)Custom deserializers can be registered globally using ObjectMapper configuration.
                @Configuration
                public class JacksonConfig {
                    @Bean
                    public ObjectMapper objectMapper() {
                        ObjectMapper mapper = new ObjectMapper();
                        SimpleModule module = new SimpleModule();
                        module.addDeserializer(LocalDate.class, new CustomDateDeserializer());
                        mapper.registerModule(module);
                        return mapper;
                    }
                }



    9)Jackson Library -
        1)@JsonProperty("alternate ") - Changes the name of properties while sending response.
        2)@JsonIgnore - Ignores the property while sending response.can also be mentioned on top of class
            if we want to ignore several properties.


    