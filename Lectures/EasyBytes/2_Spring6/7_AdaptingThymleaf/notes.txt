75_Building Dynamic Content using thymleaf (slide 75)
    To Know which dependecies to add we went to start.spring.io
    added 'thymleaf', in dependencies.
    click on generate.

    Spring Boot autoconfigured bean - SpringResourceTemplateResolver.This basically tells where to find templates.
    see API section how all this fits into it.

    Passed data to thymleaf template using Model object

    Project 19
        
        

77_Intro to Spring Dev Tools (slide 76)
    Only avalaible in Spring Boot
    All caching is disabled by spring Dev Tools.

    Imp points regarding changes -
        a)Changes in .class files , that means you need to generate the build manually.
        b)Change in .properties or .yml	✅. in build
        c)Changes to build.gradle or pom.xml won’t be seen until you rebuild
        d)If you package your app as a WAR and deploy to external Tomcat, DevTools won't help


    Files -
        pom.xml, added dependency of thyleaf
        HoMeController.java - how we pass data to model -
            By accepting a parameter of type Model
        application.properties - thymleaf related properties


81 - DeepDive Of Spring MVC Internal Architecture (slide 77, 78)

    Model -  we have an UI part, we have a business logic, but in order to make them work together, we need to have a model layer.
    So model represents the data of the application like that you want to display on your UI.Like if you want to display the
    list of students, obviously the controller will ask the model layer,which is like, go ahead and fetch the data from the database
    and once the model layer gives that information to the controller layer.Controller layer will hand over that to the view 
    layer.


    How Spring MVC works taken MVC into account -

    slide 78,79 - 
        DispatcherServlet is also called Front Controller. Because this is first controller which receives the request from
        client.Now my Dispatcher Servlet know only which path the user is trying to access, whether it is a /home, /contact, /courses,
        the path can be anything.

        Handler Mapping - this has all info about controllers. their method names along with paths they support.it tells
            Dispatcher servlet which controller to call for given path.
        Dispatcher - Now Dispatcher calls controller,Controller processes all information and returns what is the view that end user needs
            to see. So controller returns the view name, which is like home.html.
        View Resolver - dispatcher servlet receives view name like home.html. it talks with view Resolver. it is job of view Resolver
            to ready that data. it takes view name, alomg wth Model, creates a HTML page and return to Dispatcher Servlet.
            which gives this info to Tomcat server,  in form of ServeletResponse(HTTPServletResponse).Tomacat(Servlet contaner)
            takes this servlet response and converts it into HTmlResponse.

Changes -
    Project - 21
    ViewLayer -
        Refering a template inside another template - Header and Footer
        Using data From Model - Holiday
        href should be server aware

        View directory should be like this -
            src.main/resources
                static - home.html (if you are just returning html)
                static/assets - js and css
                template - html files
    Controller -
        HomeController.java -
            returns a string i.e view name without any data
        ContactController.java -
            Accepts FormInput form UI -
                First each and every form property using @RequestParam 
                Then we accepted whole objecting using a POJO type
            Calls Service
            redirects the user to
        HolidaysController.java -
            Returns a View - template and data that needs to be injected in it.
    WebConfig.java -
        Implemented a interface and overridden a method.
        Adds some controllers for path, without adding a separate @Controller
    Models -
        Contact.java - POJO for contact form (used for accepting data)
        Holiday.java - POJO for holidays, saved in DB and injected in template, to get html
    
    href links in html pages(header)
