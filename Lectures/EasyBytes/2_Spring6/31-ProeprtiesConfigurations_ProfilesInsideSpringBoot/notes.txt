234- Reading Properties using @Value (slide 192)
    it uses SPEL

235 - Reading Properties using Environment Interface (slide 193)
    Environment is a interface
    One advantage here that we have is we don't have to follow the spring expression language to to mention our 
    property names.You can straight away mention what is your property name inside double quotes and my environment 
    bean is going to take care of fetching the value from the property file and giving it back to me as a return
    value of this get property method.
    
    It can even read properties from env variables


236 - Reading properties using @ConfigurationProperties (slide 194, 195, 196), 197
    You can use use @PropertySource along with @ConfigurationProperties, if your configs are defined in
    file other than application.properties or application.yml.

    @ConfigurationProperties, we need to tell what is the prefix that you have maintained inside your property file.
         one more thing that you need to take care is you should make sure that the field names inside your Java class 
         are matching with the property names inside your property files along with the name and along with the data 
         type as well.

        see the mapping of properties to fields in the class.we can map to individual fields,maps and arrays.

        And one more advantage whenever you are using this approach is if you mention @Validated annotation, the spring 
        framework will make sure that what ever validations that you are mentioning on top of these fields are being 
        validated during the startup of the web application.

    @PropertySource(value = "classpath:config.properties",name = "customProps",encoding = "UTF-8",ignoreResourceNotFound = true) - 
        This annotation is used to specify the location of properties files to be loaded by the Spring 
            Environment.where to use it -

                a)@Configuration âœ… (most common)
                b)Along with @Component,@Service and @@ConfigurationProperties
        params -
            a)value - specifies the path 
        Specifying path - 

            1)Classpath-based (most common) - @PropertySource("classpath:app.properties")
                This loads app.properties from the src/main/resources folder.
                src/main/resources/config/db.properties ->	classpath:config/db.properties

                ðŸ”¸ Note: classpath: prefix tells Spring to look inside the compiled resources folder.

            2) Absolute File System Path
                @PropertySource("file:/opt/configs/app.properties") -> Loads file from /opt/configs/app.properties on your disk.

            3)Relative File System Path
                @PropertySource("file:./external/app.properties") -> Relative to the current working directory from which the app is run.

            4)Using Environment Variable or Placeholder (Spring 4.3+) -> @PropertySource("file:${config.dir}/app.properties")
                Spring will resolve ${config.dir} from:

                    System Properties (-Dconfig.dir=/some/path)
                    Environment Variables
                    application.properties

    @Validated we can use @Validated while reading proeprties to have some validations while reading the properties

239 - Implementation & Demo of profiles inside Eazy School Web App (slide - 198)
    If you do not activate any profile, default profile is activated.
    When you activate any profile, first properties of default profile are loaded, then properties of activated profile
    are loaded.some properties in a named profile activate properties of same name in default profile.


Code - 
    Example 49
        DashboardController.java
        application.properties.
        EazySchoolProps.java - @Validated, @ConfigurationProperties
        Profiles - 
            application_prod.properties
            application_uat.properties
            application.properties - how to import profile files and activate the profile through application.proprties