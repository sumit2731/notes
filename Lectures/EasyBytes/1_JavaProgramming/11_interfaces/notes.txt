248 - Intro to Interfaces
    Why interfaces ?
        so that we can write common code for functionalities and reuse that code for similar objects.
        for ex in slide, for different superheors, we have a common code for heros, so similar code,
        can be reused to use powers of heros.

    Why not solve the above problem with classes ?
        because with classes we need to define implementation.its like forcing devs to write a funtionality,
        when we want to overwrite it as subclass level.

249 - How to create a interface
    Inside interface we can define these -
        methods(By default all methods inside interface are public, so you can skip mentioning public access modifier
            only access modifier that you can use on methods - public and private) -
            abstract - you dnt need to specify abstract, as by default all methods are abstract
            default - defaults methods cannot be static.these acts more like instance methods.
            private - these can be static and non static.
                static private methods can only be called by other static and defaults methods in interface
                non-static private methods can be called by other default methods in interface.
            static -
                These can be accessed by class name as well as interface name.
                    but better practice is to access by interface name.

            access modifiers for methods -
                public
                private - These methods are only accessible from other default or private methods within the same interface.
                    implementing classes cannot access or overwrite private methods.
                    private static - only other private static methods can access or call these.
                    private non-static - methods can be called by default methods.
        fields(By default all fields are public, static , final) -
            static
            you can cannot use any other access modifier in class other than public
            no instance fields are allowed
        Note -  
            we cannot define instant fields inside interface. 
            fields are always public
    interface(interface defined at top level, see chatGpt for nested intreface) can have only 2 access modifiers -
        a)default
        b)public

250 - Implementing Interface

    For methods defined in interface, classes can also define overloaded methods.

    interface can also inherit interface. In that case we need to use extends keyword.
    when class implements a interface, either it should implement all abstract methods inside interface.
        or class should be declared as abstract.
    use @Override when you are implementing a method define din interface.

    Files - 
        SuperHero.java
        IronMan.java
        SpiderMan.java
        CaptainAmerica.java

251 - Advantages of Interfaces
    Files -
        MarvelHeroDemo.java
    see code comments

252 - constant field declaration inside interface (slide 7-8)
    by default fields are - public, static and final.
    interface fields are always public, you cannot use any other access modifier with them.
    but if package is not public, then these fields wnt be accessible outside the package.

    Interface fields are always final.

    They are inherited by classes which implements them.

    code - SuperHero.java, here we define field UNIVERSE_NAME


253 - Different method declarations allowed in interface (slide 9- 10)
    By default a method inside java is public and abstract


254 - why we need default methods in interface (slide 11)
    why default method?
        whenever a new feature want to be introduced inside an existing interface, instead of creating the method as an abstract method,
        they are going to create a default method with some default business logic inside it.


255 - How to built default methods in Interfaces (slide 12-13)
    default methods -
        default methods are instance based.so,default method in interface cannot be static.
        You need an object of a class that implements the interface to call its default methods.
        They are treated like instance methods and are inherited by implementing class.
        How to call -
            a)Within same interface call them just by method name.
            b)within interface that extends main interface,m their also, you can call it just by name.
            c)Implementing classes inherit them,they can be called on object of class which implements the interface.
            d)however if inheriting class/interface overwrite sthe default method, then use this syntax to call default method of parent -
                INterfaceName.super.methodName
        code - trackLiveLocation inside Superhero.java.
        default methods are only allowed in interfaces, not in classes. but in classes
            you can override them.


    private methods(can be static and instance, they are not exposed outside world) -
        when Java team decided to allow the default methods inside Java 8.They end up writing a lot of default method in many of the
        interfaces.When a developer is writing a lot of default methods, which is going to have a lot of business logic,
        at some point of time, they are going to hold some common business functionality, which needed by multiple default methods inside
        the same interface.So to avoid that repetition of the business logic in multiple default methods, Java team provided a
        flexibility to define private methods in interface from Java 9.

        whatever private methods that you are going to define inside your interface, they are not going to be inherited by your implementation
        classes.These private methods are strictly for your default methods common business logic.
        a)private instance methods
            can only be called from default methods within the same interface.
            these called directly by name.
        b)private static methods -
            can only be called from  -
                a)other static methods
                    directly by name.
                b)default methods within the same interface.
                    directly by name

256  - Static methods in Interface
    Reason for static methods -
        When you start writing lot of business logic inside your interface with the help of private methods,
        or with the help of default methods.Obviously at some point of time you will have some utility logic
        which is specific to your interface.Before Java 8, all the utility logic related to an interface they
        used to maintain in a separate class with the multiple static methods, but from Java 8, since we can 
        define business logic within the interface, there is a strong need came for the utility methods
        or  static methods also to be allowed inside the interface?

    accessing static interface methods -
        Inside class that implements interface - access by interfaceName.
        Inside any other class - access by interfaceName.
        Inside interface - directly by name

    You can only access static methods of interface inside implementing class, through Interface 's name and not class name that implements it.
    while static fields you can access with class name, it is considered to be bad practice.



257 - Multiple Inheritance using interfaces - Part 1
    How to solve diamond problem, when interface extends multiple interfaces
    slide - 18, 19

    slide 19 - (Code - Superhero,Person,Hero)
        Usecase 1(both interface have abstract method) -
            Case 1(If signature of methods is same) - 
                then their is no problem, your interface can inherit from any.Generally it extends from interface which appears first after extends.
                In intellij also, while seeing all methods of a class, you will see that method appear only once and is inherited from
                first interface.but recommend practice is that you define method in interfaceC by using @override.
            Case 2 - if signature is different
                Then interface inherits from both. Even if you override a particular signture, second signature is still inherited.
        Usecase 2 - (one is default method , one is abstract method)
            case 2.1 - Signature is same.
                You will get error,as their is ambiguity about which method to inherit, so their is error.You can use @override annotation, can 
                either define abstract method, or you can define default method.but signature needs to be same. you can even call default 
                method of super class, syntax -InterfaceName.super.defaultMethodName().

            Case 2.2 - signature os different
                No problem. interface inherits same


        UseCase 3 - both have interfaces have default methods
            same as useCase2


258 - Multiple inheritance using interfaces Part2
    slide - 19
        when their is ambiguity- class vs interface, class always wins.
        code - Developer


259 - Interface defines a new Type
    Slide 22 -
        You cannot assign a interface data type to class data type.
        vice versa is allowed i.e class value type can be assigned to interface data type.

    Slide 23 -
        if we give assurance to compiler that interface data type holds the value is class type, then above
        operations is allwoed.

260 - Marker Interfaces
    slide 24

    Serilization - serialization is a process of converting an object into the stream of bytes data, so that these streams
        of byte data I can save into a disk space, or I can send to some other application over the network.

262 - Class vs Abstrcat vs Interface
    Sealed Interface - interface decides which classes can implemented them.this is same as sealed classes.

        sealed interface Animal permits Dog,Cat{}

