CharSequence - interface that represents a sequence of characters.
    While CharSequence itself doesn't enforce immutability, its methods 
    primarily provide read-only access to the character sequence. 
    Mutability is handled by classes that implement it -

        String
        StringBuilder
        StringBuffer
        Character Buffer

String
StringBuilder
    This is mutable, so Prefered when we have large strings and frequent updates are needed.
    methods -
        append
        insert(index,str)
        deleteCharAt(index)
        setLength(number)
StringBuffer
    same as String builder but it is safe for multi threading
CharArray
CharArrayWriter
    CharArrayWriter uses an internal char[] buffer, which is mutable.
    The buffer can grow dynamically
    CharArrayWriter is a Writer subclass, designed to work seamlessly with Java's character 
        streams. This makes it ideal for capturing output from other stream-based operations.
    The writeTo(Writer out) method allows you to efficiently write the contents of the CharArrayWriter
        to another Writer without creating an intermediate String object. This can be beneficial when 
        you want to process the character data further using other stream operations.
    Prefered over String when we have large Characters and frequent updates are needed.
    When to use -
        a)CharArrayWriter is primarily designed as a character stream for capturing output. 
            It's not as versatile for general string manipulation as StringBuilder.
        b)It's main focus is to be a destination for character streams, and then to provide
            the stored data as a char array, or String.
        c)CharArrayWriter is for capturing character output from streams into an in memory buffer.


Character Buffer - 
    a)Buffers improve I/O performance by allowing the program to work with larger chunks
        of data rather than individual bytes or characters. This reduces the number of
        system calls, which are relatively expensive.

    b)Buffers are a key component of the java.nio framework, which provides a more flexible and
        efficient approach to I/O compared to the traditional java.io streams.
    b)alter nate for character stream, especially when dealing with large amounts of character
        data or when random access is required.

    methods in buffer -
        allocate -  allocate memory for the buffer
        get - Data is read from a buffer
        put - Data is written
        flip - prepares a buffer for reading by setting the limit to the current position and
            resetting the position to 0
Buffer -
    within the java.nio (New Input/Output) package, is a region of memory used to hold data temporarily.
    It's a fundamental concept for efficient data transfer, especially when dealing with I/O operations.
    Buffers are a key component of the java.nio framework, which provides a more flexible and efficient 
    approach to I/O compared to the traditional java.io streams.
    Uses -
        a)Improved I/O Performance:
            Buffers improve I/O performance by allowing the program to work with larger chunks of data
            rather than individual bytes or characters. This reduces the number of system calls, which 
            are relatively expensive.
            Buffers reduce the overhead of system calls, leading to faster data transfer.
        b)Non-Blocking I/O:
            Buffers are essential for non-blocking I/O operations, where a thread can perform other 
                tasks while waiting for I/O to complete.
        c)Memory-Mapped Files:
            Buffers can be used with memory-mapped files, allowing direct access to file content in memory.
        d)Direct Memory Access:
            ByteBuffers can be direct, which means that the java virtual machine will try to perform I/O
                operations directly against the operating system memory. This can greatly increase I/O
                speed.


   
