40 - Introduction to life cycle of a java program (slide 1)

41 JDK,JRE vs JVM(slide 2,3) -
    JDE - It is nothing but your Java installation folder.It is collection of tools and utilities.
    Since these installation folder has lot many utilities and tools, that is going to help the developers
        while developing Java programs.We call these installation folder as Java Development Kit.

    How to locaate installtion folder?
     echo $JAVA_HOME

    get the path and in path, open bin folder , here all all executable files are there..

    JDK - JRE + dev tools.
        dev tools - helps to run/compile java programs, ex- java compiler, document generator, jar generator.
        JRE - people whi simply need to run the compiled code , they can just install JRE. but people who want to
         develop java programs, JDK is needed.JRE can take .class(compiled) file and run java program. JRE= JVM + core classes + supporting files


        JVM - JVM is going to accept the byte code or the .class file that is generated during the compilation process.
            And this JVM is going to convert your byte code to an operating system specific format.

42 - Jow java became platForm independent
    Life Cycyle of Java program(slide 4)
        a)file name should end in .java.
        b)className and file Name should match. otherwise you will get compile time error.
        c)run - javac MyClass.java
        d)we get MyClass.class, which is byte code.
        e)run - java MyClass, this feeds this file to jvm and JVM converts this byte code into the format that
            can be understood by your operating system.So eventually these operating specific instructions will be fed to your CPU or processor.
            So the processor is going to execute all the native executable code that is generated by the JVM and we are going to get an output.
        

    Java is Platform indepenent language
        You don't have to develop your Java program differently for different operating system, and at the same time, you don't have to compile
        differently for different operating systems.Usually what developers they will do is, they will write the source code, they will compile it post
        that they will also validate the business logic inside the local system with the help of the JVM. After that, they are going to deploy their 
        bytecode or MyClass.class file into a production server,and inside the production server they are going to install JVM, and JVM is going to take
        care of running their Java program inside the production server.So the steps that the developer has to follow will be done only once
        the compilation process does not need to be repeated for multiple machines whenever he is trying to deploy his code.

    JVM is platform dependent.


43- How java became platForm independent - part2 (slide 5,6,7)
    
    java is both compiled and interpreted language
    
        java compiler converts .java file into semi binary format which is known as bytecode.
        the JVM is going to convert the bytecode into the native executable code that can be understand by my operating system or by my CPU processor, and 
        eventually I'll get my Java program output.So whatever process is happening with the help of JVM, we call it as interpretation stage.Because inside this
        interpretation stage, my JVM is trying to convert a semi binary format which is byte code, into the native executable code.


    How Java takes care of performance(JIT Compilation)
        As Java is compiled and interpreted, also in intretaion step each line is executed one by one, dnt yu think it will cause performance issue?
        the Java is going to optimize the performance by using dynamic compilation or JIT compilation.So think like you have given a bytecode to your JVM which 
        has thousands of lines.The JVM is not going to convert all your thousand lines of bytecode into the machine code immediately.It is only going to do the 
        conversion on the fly based upon the particular method that you are trying to invoke.at the same time it is also going to recognize,what is the piece of code
        that is going to be executed very commonly.So such a code, which is going to be executed very frequently inside your Java program, it is going to identify them as
        a hot spots for all the code present inside these hot spots,it is going to do the conversion from bytecode to the machine code only once.So it is going to cache that
        and whenever the same common code is being executed one more time in the future, it is not going to do the interpretation one more time.It is simply going to use 
        the already available machine code in the cache.


45 - Introduction to Java program code structure (slide 9,10,11)

    public keyword in class
        public is a keyword that we need to define just before the class keyword.So this public indicates that 
            my class can be accessed by my JVM.Without defining a class public your JVM cannot access it and it
            cannot execute the program inside it.

    Use Pascal case while naming classes.for methods use camel case.name of file should be same as name of 
    class.

    How JVM knows where to start?
        it scans for classname mentioned in terminal. there it looks for static main method.So to communicate 
        the starting point for our JVM, we are going to write a main method by following the exact syntax 
        recommended by the Java team - "public static void main". if jvm finds this method it executes it, otherwise
        it throws error.

        public - it indicates that this method can be invoked or accessed from outside of this Java class.
            Especially my JVM can access it with the help of this public keyword.

        parameters - String[] args, args is the parameters passed from terminal.
            if you run java MyProgram hello world, then args[0] will contain "hello" and args[1] will contain 
            "world".

50 - writing first class in java
    we saw to create a project
    create a class
    run a class
    .class are generated in out->production folder

