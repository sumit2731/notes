# Doc LInk - https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/deployment-v1/
# Search kubernetes deployment yaml to see latest version
apiVersion: apps/v1
# kind of kubernetes object that you would like to create.value can be only supported kubernetes objects
# you can check API refrence of kubernetes to see all supported objects and configurations - kubernetes docs -> refrence-> api refrence, then
#   search required object like deployment. you can see all config that this object supports
# https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/deployment-v1/
kind: Deployment
# See docs , which other values can be added in metadata section.metadata is not applicable for all objects but for many it is
# althrough most options are relevent in most of cases
metadata:
  # Name of deployment
  name: second-app-deployment
  # Labels are used to select a resource by other resource like deployment selects pod, service selects pod.
  # We can also use labels to select object while running command. for example - kubectl delete deployments,services -l group=example
  labels:
    group: example
# the specification of this deployment.And that's the meat of this object because here, we will define how this deployment
# should be configured.(DeploymentSpec)
spec:
  # No of pod instances.we can either start deployment with extra replicas or later we can scale it based on some matrix.
  # value of one, or two, or three, or even zero if you initially don't want any pods to be launched.
  replicas: 1
  # We can select by labels only, we cannot use name . here
  selector:
    # key-value pair of pod labels that we want to match with this deployment. we already define which pods should be created by this deployment, so why we need selectors?
    # pods defined in this deployment will be created when deployment is applied. but deployment is dynamic things in kubernetes.For example,if you scale up the number of pods
    # after a deployment has been created,these new pods which are created will still automatically be managed by the already existing deployment.
    
    # so a deployment continuously watches all the pods which are out there and sees if there are any pods it should control.And it selects the to be controlled pods with a
    # so-called selector.Now there are different types of selectors here for a deployment we can use two different kinds of selecting -
    #   matchLabels - you simply have key/value pairs of labels on the pods which should be controlled by that deployment.see template section deployment object.
    #   matchExpressions - more complex so for now we will look at only matchLabels.
    # you will see selectors on pretty much all resources Kubernetes works with.For example, Also Services.
    matchLabels:
      #     # both of these lables with exact same values needs to be in pod, which will be manged by this deployment
      # Note - deployment always needs to select the pods that it creates.
      app: second-app
      tier: backend
    # this is matchExpressions syntax. here we have expressions and all of these needs to be satified in order for a pod to be selected by this deployment.
    # Supported operators - In, NotIn, Exists and DoesNotExist
    # matchExpressions:
    #   - {key: app, operator: In , values : [second-app]}

  # Here You will define the pods that should be created as part of this deployment. PodTemplateSpec
  template:
    # since template defines pod which is another kubernetes object, so we add metadata.
    # we do not need kind here because template always describes the pod.you can optionally give name also in metadata
    metadata:
      # we can give it name but here we give it label.
      #any key value pair is acceptable.You can have one or more labels on a given object in this case on a pod.
      # And then you can connect that to another object in this case, to the deployment with a so-called selector
      labels:
        app: second-app
        tier: backend
    # (PodSpec) - https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#PodSpec
    # This is the specification of individual pod that should be created for deployment.we can only have one type of pod in a deployment
    #   we can different replicas of same pod type. but in on deployment there can be one pod type. if you have multiple pods types
    #   i.e different pods with different containers, then you need to create different deployment objects.
    spec:
      # check this doc, to see what other options we can have in containers
      # here we have multiple containers so we need to have '-'
      # this is like docker-compose, you can specify large list of options for each container, like you cn specify when
      # manually starting container, entryPoint etc
      # docs - https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#Container
      containers:
        - name: second-node
          # image: kub-first-app:1.0.0
          image: sumeet27/kub-first-app:2
          # This not speciffied this default to always ,if image tag is :latest
          # if explicitly defined - always, then it will always pull the image even if no tag is present
          # otherValues - Never, IfNotPresent
          # Note - even with Always value kubernetes will only fetch the image when it sees a chnage in desired state.
          # If you just update the tag and nothing in deployment, then image will not be pulled.
          # use - kubectl rollout restart deployment/"deloymentName" , in such cases
          imagePullPolicy: Always
          # This how Kubernetes checks whether your pods and containers,whether they are healthy or not,
          livenessProbe: 
            httpGet:
              path: /
              port: 8080
            #   httpHeaders:
            #     - name: X-My-Header
            #       value: my-value
            # after how much time health should be checked
            periodSeconds: 10
            #  How much time it should wait to check health first time
            initialDelaySeconds: 5
        # - name: third-node
        #   image:
