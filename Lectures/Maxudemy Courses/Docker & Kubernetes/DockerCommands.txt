commands -
    1)images -
        1) docker build
            docker build .
            It creates the docker image from docker config file. as argument it takes path of Dockerfile, . means file exist in same
            path where terminal is. this command returns the imageid, which is used to create the container. when docker file is in some
            folder -

            docker build ./frontend



            flags -

                a) -t
                    docker build -t goals:latest .

                    this builds a image based on docker configuration and then gives name and tag to that image. so later we can refer to 
                    this image using this name. note here tag is optional you can leave it(be default tag will be latest), if you want. when 
                    you print all images, name of image will be shown in repository column.

                b)-f
                    this is used in case your dockerFile has some different name than Dockerfile -

                    docker build -f frontend/DockerFile.prod

                complex command -

                docker build -t custom-tag -f ./frontend/DockerFile.prod ./frontend

                note - here you need to have frontend 2 times because first one gives the location of file and second one sets the context
                of build command. see lecture 155 for details.

                c)--target
                    used in multistage build, this would cause the image build process to stop after stage given by target flag was processed.

                    docker build --target "stageName"  .
                    more complex version - 
                        docker build --target "stageName" -f frontend/Dockerfile.prod ./frontend

                d)--build-arg
                    used to provide build time arguments

                    docker build --build-arg DEFAULT_PORT=8000 .


        2)docker run "imageId"
            docker run "imageName or tag"
            creates a container from image and runs that container in attached mode by default. imageId can exist on system or
                on remote repository(default is dockerHub).If it does not exist on system then first it will download the imageId.

            Examples - 

                    docker run node
                        It downloads the node docker image from docker hub(if not found locally) and creates the contianer based 
                        on that image.here container is created and exited automatically because intercative shell created in 
                        container is not exposed to us automatically.for that we can add flag -it, we will actually tell Docker 
                        that we wanna expose an interactive session from inside the container to our hosting machine.

                        docker run -it node

            a)we can specify the command after image name, this will replace the default command that is define in image. see lecture 104

                docker run -it node npm init

            flags -

                1)-p = for attaching port.
                    docker run -p "loalPort":"containerPort" dockerImage
                    it runs the dockerImage into contianer and connect port 3000 of local system with port 80 of docker container.
                2)-d = detached
                    docker run -d "imageId"
                        for running container in detached mode. it returns the id of detacched container. which can be later used to
                        attach the container. using -
                            docker container attach "containerName"

                    using multiple flags -

                        docker run -p 8000:80 -d "imageid"

                3)-i
                    some programs like code 3 of section 2 needs input from user. in case of programs like this we use i f;ag along with -t flag.
                    also when we start such stopped containers, then we need to use this flag.-t flag is memorized if contianer was created by using -t flag.
                    It means run the docker in interactive mode. it allows us to give input to the process.when we run a container from image
                    

                4)-t
                    this allocates a pseudo TTY and in the end this means it creates a terminal.typically we combine -i flag with t and 
                    use them like this this - -it.and therefore if you combine the I and the T flag we are able to input something so the
                    container will listen for our input and we'll also get a terminal exposed by the container which is actually the 
                    device where we enter the input.

                5)-it  interactive
                            docker run -it "imageId"
                                runs docker container from image, and exposes a interactive session from inside the container to our hosting machine.
                                now you can give inputs and also see the outputs.In code it was used to execute node image and interact with cli.
                                when you only need to see output try to use only -i or -t flag.

                6)--rm
                    it automatically removes the container when it exist.
                            docker run -p 3000:80 -d --rm "imageId"
                7)--name - gives the naame to container
                    docker run -p 3000:80 -d --rm --name "nameString" "imageId"

                    now we can refer to container using this name, like to stop container - docker stop containerName

                8) -v
                    a)named volumne
                        -v nameofVolume:pathInContainerFileSystem
                        It helps us to create a named volume and link a local file system with path in container. named volume are not 
                        destroyed when container is removed.but you cannot access the path on your local drive.

                        docker run -p 3000:80 -v feedback:/app/feedback feedback-node:volumes
                    b)bind mount
                        -v "absolutePathInSystem:absolutePathInContainer"
                        docker run -d -p 3000:80  --rm --name feedback-app -v feedback:/app/feedback -v "/Users/susood/Desktop/notes/notes/Lectures/Maxudemy Courses/Docker & Kubernetes/3)Managing_Data_And_Working_With_Volumes/code2/Dockerfile:/app" feedback-node

                        you can put path in "" so tat it does not break if you have special characters or space there.
                        instead of using full absolute path we can use this -

                            macOS / Linux: -v $(pwd):/app

                            Windows: -v "%cd%":/app

                        for using bind mount you need to make sure that docker has access to folder on your local system, it varies which os you use. refer to
                        lecture 51 for details.

                    c)annonymous volume (see dockerFile of code1 in section 3)
                        -v "absolePathInDockerFileSystem"
                        -v /app/node_modules

                        note - this can also be mentioned in Dockerfile -
                            VOLUME ["/app/node_modules"]

                        Use of annonymous volume, when we want to map folder form local system to docker file system, but some folder
                        on docker system we do not want to overwrite(like node_modules) then we can map this node_module to a announymous
                        volume. now this node_modules will not be overwritten by bind mount.

                    d)ro - by defualt all volumes are read-write, this means docker can read as well as write data into them. but you can turn 
                        them into read only by using :ro in then end. ex -

                        -v "/Users/susood/Desktop/notes/notes/Lectures/Maxudemy Courses/Docker & Kubernetes/3)Managing_Data_And_Working_With_Volumes/code2/Dockerfile:/app:ro"
                9)--env or -e
                        it lets you pass envirenment varibles. refer lecture 61 in notes to see more ways of adding env variable.

                        -e PORT =8000 -e name=sumit

                10)--env-file
                        lets you pass a file, which contains value of envirement variables.

                        ex - 
                            docker run --env-file ./.env imageName

                        see lecture 61

                11)--network
                    docker run --network "networkName" imageName
                    network with this names needs to be created there otherwise container creation will faul.see notes of lectures 74 for detals.
        3)docker images
            lists all images

        4)docker rmi "image1Id" "image2Id" "image3Id"
            it removes the image and all its layers. you can only remove the images which are not used by any containers.
            that means even if image is used by container and that container is stopped, first you need to delete the 
            contianer, only then you can remove the image.

        5)docker image prune
            removes all images which are not tagged and not used by any containers.

            flags -
                1)a - removes named (tagged) images also but does not remove images who are used by a container,even stopped container
                    docker image prune -a

        6)docker image inspect "imageId"
            gives the details about a image. gives this info -
                a) creation date
                b)container details -
                    a)ports exposed
                    b)entrypoint - command to be executed
                    c)envVariables
                    d)OS system
                    e)different layers


        7)docker tag
            creates the clone of existing image with new tag. but both images will have same imageId and will existing simultaneously.

            docker tag "oldTag" "newTag"

        8)docker push "repository name"
            pushes a image to repository in image sharing platform. default is docker hub.
            lets say username in docker hub is sumeet27 and name of repository is node-app. then you need to rename your image in local 
            system to sumeet27/node-app then run -

            docker push sumeet27/node-app

            you can also give tag name but that is optional.if we do not use tag then by default latest tag name is given


        9)docker pull "repo:tag"
            pulls a image from git hub

        10)docker images
            shows all images

    2)containers -

        1)docker ps 
            gives lis of all running docker containers. ps stands for processes

            flags -
                a) a -it gives all processes(running and stopped), all containers that docker created for us.
                    docker ps -a


        2)docker stop containerName
            stop the container.you can get docker container name by running docker ps.


        3)docker start "containerName"(or contianerId)
            this restarts a container in detached mode(terminal wnt be waiting). Note -p is remeber when you first started a container. you cannot give 
                this flag while starting container again once it have been stopped.

            flags -
                1)a - attaches the started container.
                    docker start -a "containerName". this is for listening the output, i.e this is listen only mode.if you
                    want to give input, use -i flag.

                2)i - interactive flag.you give input also.
                    docker start -a -i "containerName". you can use -t flag but if orignally container was started with -t flag
                    then that will be memomized. In python code where we need inputs form user we used both attach and interactive flag.
                    but it also works only with interactive flag.


        4)docker container attach "containerId or ContainerName"
            or 
            docker attach "containerID"
            Attcahes a running container which is detached.


        5)docker logs "containerName"
            fetches all the logs for containers(including past one).This means terminal output.
            You can only see logs of running/stpped containers. you can see logs to troubleshoot why a container was shutdown.
            we do this in lecture 52.

            flags -

                -f - follow. keeps on listening and prints future logs also. we are simply attaching docker gain.

        6)docker rm "container1Name" "container2Name" "container3Name"
            It removes the contianer. this container should be stopped first, you cannot remove a running container.

        7)docker container prune
            removes all stopped containers at once.

        8)docker container inspect "containerName"

            this commands inspects the container. we used it to get IP address of container where our mongoDB container was running.
            then we used ip address of this container to connect to mongodb from container that was running node code.


        9)docker cp - It allows you to copy files into or from a running container
            docker cp "path1" "path2". copies files form path1 to path2.

            docker path is specified by dockerName:pathInsideDocker
                ex - a)docker cp dummy/. strange_neumann:/test (copies file from local to conatiner. dummy/. means copy all contents 
                    inside dummy, we can also target induival files, here . means copy everything). inside container test folder will
                    be created, if it does not exist yet.

                    b)docker cp strange:/test dummy (copies file from container to local system)

            this is helpful to copy logs files.We will instead learn about a better way of updating code in a container

    3)volumes
        a)docker volume ls
            gives name of all volumes setup by docker. it shows only named and annonymous volumes. bind mounts are not shown.

        b)docker volume rm VOL_NAME
            you get error if you try to remove a volume which is issued by some contianer which is currently running.
        
        
        c)docker volume prune
            removes all unused volume. does not remove volume which is used by currently running containers

        d)docker volume create feedback-files
            it creates a volumne. while giving volume while running container ,docker will create volume if it does not exist. but still you can also
            manually create named volumes.
        e)docker volume inspect "volumeName"

            it shows the details of volumen like when it was created , path  and options used while creating the volume. path is not in local file 
            system, but it path in virtual machine that docker has setup on your system. under options you can see whether this volume is read only or
            not.

        Note - bind mounts are not controlled by docker,so you cannot see it via cmd.

    4)network -

        a)docker network create "networkName"
            creates the network

        b)docker network ls

            list the all networks

    5)docker-compose
        for detials on difference between "docker-compose run" and "docker-compose exec". see this link -
            https://medium.com/analytics-vidhya/how-to-understand-the-difference-between-docker-composes-up-vs-run-vs-exec-commands-a506151967df

        a)docker-compose up
            starts the all services and containers mention in docker-compose.yaml. see lecture 96. by default all services are in attached mode.
            --rm option is default

            another variant -
                a)docker-compose up serviceName
                    this will start only one service

                b)docker-compose up serviceName1 serviceName2 serviceName3
                    this will starts the follwoing services.

            flags -

                a)-d
                    docker-compose up -d
                        starts the all services in container in dettached mode.

                b)--build
                    By default docker-compose will rebuild a image if image does not exist.next time you run docker compose, it will not rebuild the
                    image ,if it founds a existing image.but with this flag, you force the docker-compose to do rebuild the image.

        b)docker-compose down
            removes all services and removes all containers.deletes all container, default network it created and shuts everything down.
             this does not delete volumes(named volume).

            flags -

                a)-v 
                    docker-compose down -v
                    It also removes volumes now.

        c)docker-compose build
            docker builds the images without starting the containers

        d)docker-compose ps

            list all the services running under container

        e)docker-compose run serviceName 
            variant - docker compose run serviceName command.This command will be appended after entryPoint mentioned in Dockerfile
             if you want your container to be destroyed after running the service
                then use --rm flag.

            Commands you use with run, start in new containers with configuration defined by that of the service, including volumes, links,
             and other details. However, there are two important differences:

                a)command passed by run overrides the command defined in the service configuration.
                b)docker compose run command does not create any of the ports specified in the service configuration. This prevents port 
                    collisions with already-open ports. If you do want the service’s ports to be created and mapped to the host, specify
                    the --service-ports -

                        docker compose run --service-ports web python manage.py shell

            docker-compose run is meant for running one-off tasks in a container.by default no ports will be created in case  they collide
             with already opened ports.

            see docs - https://docs.docker.com/engine/reference/commandline/compose_run/

        f)docker-compose exec [options] [-e KEY=VAL...] SERVICE COMMAND [ARGS...]
            this for running the command in container which were created by docker-compose

            docker-compose exec is meant to interact with a container that is already running. That also explains why it requires a 
             COMMAND argument, because it’s expecting the container that is currently running to already be executing the default command
             so it expects to run a different.

            It is best to avoid using docker-compose exec unless there is a strong reason to do so.
            
    6)docker exec "containerName" "command"
        docker exec german npm init
        The Docker exec command allows you to execute certain commands inside of a running container besides the default command, this 
        container executes.So besides the command that might've been specified in a Docker file, that command still continues running.
        So the application still continues to run but you can run additional commands inside of a container.


        use this command you can do these things inside file system of container -

            1)create file
            2)see files in system.

        to all this execute this command - docker exec -it "containerName" bash.
        This will create a new Bash session in the container. now all commands will be executed in container.
        see this - https://docs.docker.com/engine/reference/commandline/exec/

        flags -

            a)-it
                docker exec -it containername Command

                use this if you want to stay connected to that process, you're starting up here and if you want to be able to provide input.
    7)overwriting the default command in container -
        docker run imageName command
        docker run --it node npm init
    8)docker hub -

        a)docker login -
            allows you to enter username and passowrd to login into dockerhub

        b)docker push sumeet27/node-example-1
            it pushes the image with tag "sumeet27/node-example-1" to docker hub.