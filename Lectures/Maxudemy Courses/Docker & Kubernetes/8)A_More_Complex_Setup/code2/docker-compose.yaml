version: "3.8"

services:
  server:
    # image: 'nginx:stable-alpine'
    # context is path where image is built, so it should have access to all files mentioned in dockerfile
    # all paths in dockerFile should be relative to context.
    # here since in dockerFile we need access to nginx/nginx.conf and src folder , we set working
    # directory accordingly.. means same path as docker-compose
    build:
      context: .
      dockerfile: dockerfiles/nginx.dockerfile
    ports:
      - "8000:80"
    # volumes:
    # - ./src:/var/www/html
    # # inside the nginx, config file needs to be default.conf because it is merged with another config files, to create resultant config file
    # - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - php
      - mysql

  php:
    # here we cannot just mention the folder because our file is not named as Dockerfile. now we need a more detailed config
    # build : ./dockerfiles

    build:
      context: .
      dockerfile: dockerfiles/php.dockerfile
    # volumes:
    # by the way,also improve performance a little bit by adding delegated after a colon at the end, that if the containers
    # should write some data there,it's not instantly reflected back to the host machine,instead it is basically processed in
    # batches, you could say,and therefore performance is a bit better.It's a optimization, we don't have to do it here,but we
    # can add it.this container shouldn't write frequently to this folder,or even if it does the things it does right don't need
    # to be reflected back to the host machine instantly.Because it won't write anything which we need to access instantly on the
    # host machine.Read only is not an option because it will write some data to our disc. The Laravel framework will also generate
    # some files when it runs,for example the views which are sent back as part of responses.
    # - ./src:/var/www/html:delegated

  mysql:
    platform: linux/x86_64
    image: mysql:5.7
    env_file:
      - ./env/mysql.env

  composer:
    build:
      context: ./dockerfiles
      dockerfile: composer.dockerfile

    volumes:
      - ./src:/var/www/html

  artisan:
    build:
      context: .
      dockerfile: dockerfiles/php.dockerfile
    volumes:
      - ./src:/var/www/html
    entrypoint: ["php", "/var/www/html/artisan"]

  npm:
    image: node:14
    working_dir: /var/www/html
    entrypoint: ["npm"]
    volumes:
      - ./src:/var/www/html
