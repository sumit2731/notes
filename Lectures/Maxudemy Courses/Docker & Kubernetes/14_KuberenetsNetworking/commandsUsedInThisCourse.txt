1)Running things locally -
    docker compose up -d --build

2)implementing slide 1(code1)(communication between 2 containers in same pod using localhost)
    deploying users-api on kubernetes -
        1)In code remove all refrences to auth-api.use dummy values. first we just want the users service to be containerized.
        2)push image to docker hub -
            docker build -t sumeet27/kub-demo-users .
            docker push sumeet27/kub-demo-users
        3)Deploying users-service in kubernetes cluster -
            kubectl apply -f=users-deployment.yaml
            kubectl apply -f=users-service.yaml
            minikube service users-service

            Now we were able to hit the users API's and get response.
    Deploying auth api on kubernetes -
        1)create new image for userAPI and push it in docker hub.
        2)In usersAPI start using refrences for authAPI, instead of hard coding URL, use env Variables -
            AUTH_ADDRESS
        3)In docker-compose.yaml, provide value for AUTH_ADDRESS in users service. value is name of auth service - 'auth'.
        4)push auth image in ducker hub -
            docker build -t sumeet27/kub-demo-auth .
            docker push sumeet27/kub-demo-auth
        5)Auth API needs to be in same pod as users api. so we add a container config in users-deployment.yaml.
            because creating a new deployment will create a new pod. In a deployment, we can have 1 type of pod and
            that pod can have multiple containers.so we add new container to existing pod.
            so update users-deployment.yaml
        6)now in users-deployment.yaml,provide env variable to user-api contianer -
            AUTH_ADDRESS - 'localhost'
            THis is because both containers are running on same pod. so they can communicate using localhost
        7)we do not expose the port used by auth API in users-service, so no changes are required in users-service.yaml.this makes sure that authAPI
            is not reachable to outside world.
        8)docker apply -f=users-deployment.yaml -f=users-service.yaml.with This you should be able to hit api's of userService using postman.
            url is serviceIp and port is port exposed by service.
3)implementing slide2(code2) -
    a)separate container for auth-pod
        1)as we need different pod ofr authService,create a separate deployment for authApi - auth-deployment.yaml.
        2)remove auth container from users-deployment.yaml.
        3)now we need service for authAPi as containers in another pod need to reach it. so we created - auth-service.yaml
            type-ClusterIP , not LoadBalancer because we do not want to expose service outside.
        4)apply service config -
            kubectl apply  -f=auth-service.yaml -f=auth-deployment.yaml
            minikube service auth-service
        5)now we need  the IP for reaching the auth-service, so that in usersApi we can us that api to reach authApi.
            we use env variables  for this, we need to give env variables in container conifg.
            a)way 1 -
                1)kubectl get services.
                2)copy IP CLUSTER-IP, this will not change.
            b)way 2 -
                1)Kubernetes will give you automatically generated environment variables in your programs, with information about all the services,
                    which are running in your cluster.through these environment variables,kubernetes will automatically give us information,like the 
                    IP addresses of the different services
                2)name of env variable -
                    a)all charcters are caps
                    b)'-' is replace be '_'
                    auth-service - AUTH_SERVICE_SERVICE_HOST

            In usersAPI we use both of these ways. wo we need to provide 2 env's -
                AUTH_ADDRESS -
                    docker-compose - name of network
                    kubernetes - first start service then copy the IP, then provide it in users-deployment.yaml 
                AUTH_SERVICE_SERVICE_HOST - kubernetes provides it automatically, but in case of docker-compose we need to provide it
        6)IN users-api, use above 2 env variables.
        7)update image in docker hub.
        8)kubectl apply -f=users-deployment.yaml 
    9)then we saw there is third way of reaching to a service inside  a cluster, there is a internal DNS mapping is created for each service -
        `{serviceName}.{namespaceName}`
        if you dnt specify namespace while creating service, then it is default.
    10)we used this instead of getting IP address. also this is prefered way of reaching to service.
        so we change value of AUTH_ADDRESS in users-deployment.yaml.
--------------------------------------------------------------------------------

    Adding third container - 
    11)Then we added a third container for tasks, we created 2 files -
        a)tasks-deployment.yaml
        b)tasks-service.yaml

    Commands to up everything -
        kubectl apply -f=auth-service.yaml,tasks-service.yaml,users-service.yaml
        kubectl apply -f=auth-deployment.yaml,tasks-deployment.yaml,users-deployment.yaml

        minikube service users-service
        minikube service tasks-service


code 3 (adding containerized frontend app) -
    First we want to run the code locally using docker and hit the task service deployed in kubernetes -
        1)In app.js  -
            1)we added the internal cluster IP of tasks-service, to reach backend.
            2)added required headers required by backend like  AuthToken etc.
        2)docker build -t sumeet27/kub-demo-frontend .
        3)docker run -p 80:80 --rm -d sumeet27/kub-demo-frontend
        4)now we get get the coors error, so we need to redeploy the tasks service -
            update image -
                docker build -t sumeet27/kub-demo-tasks .
                docker push sumeet27/kub-demo-tasks
            delete old deployment  -`
                kubectl delete -f=tasks-deployment.yaml
            new deployment -
                kubectl apply -f=tasks-deployment.yaml

    Deploying frontend in kubernetes -
        1)push docker image into docker hub.
            docker push sumeet27/kub-demo-frontend
        2)then we created 2 files -
            a)frontend-deployment.yaml
            b)frontend-service.yaml
        3)then we applied those files into kubernetes cluster -
            kubectl apply -f=frontend-deployment.yaml,frontend-service.yaml
        4)then we used minikube service frontend-service to access the frontend app.
            minikube service frontend-service

    Using reverse proxy in frontend code - 
        1)in nginx config we added a config to forward /api calls to ip of our service.
        2)In app.js code we started making calls to /api.
        3)build image and push to docker hub.
        4)delete old deployment object for frontend-deployment.yaml and create new one.
        5)
